	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
{
  "template_graph": {
    "body": [
      "template< typename T >",
      "struct edge {",
      "  int src, to;",
      "  T cost;",
      "  edge(int _to, T _cost) : src(-1), to(_to), cost(_cost) {}",
      "  edge(int _src, int _to, T _cost) : src(_src), to(_to), cost(_cost) {}",
      "  edge &operator=(const int &x) {",
      "    to = x;",
      "    return *this;",
      "  }",
      "  operator int() const { return to; }",
      "};",
      "",
      "template< typename T>",
      "struct node {",
      "  vector<edge<T>> edges;",
      "};",
      "",
      "template< typename T >",
      "using Edges = vector< edge< T > >;",
      "template< typename T >",
      "using WeightedGraph = vector< node< T > >;",
      "using UnWeightedGraph = vector< vector< int > >;",
      "template< typename T >",
      "using Matrix = vector< vector< T > >;"
    ],
    "prefix": "template_graph",
    "description": "template_graph"
  },
  "modint": {
    "body": [
      "template<uint32_t M = 1000000007>",
      "struct modint{",
      "    using u64 = std::uint_fast64_t;",
      "    u64 val;",
      "    modint(): val(0){}",
      "    template<typename T>",
      "    modint(T t){t %= (T)M; if(t < 0) t += (T)M; val = t;}",
      "",
      "    modint pow(ll k) const {",
      "        modint res(1), x(val);",
      "        while(k){",
      "            if(k&1) res *= x;",
      "            x *= x;",
      "            k >>= 1;",
      "        }",
      "        return res;",
      "    }",
      "    static modint nCr(ll n, ll r){",
      "        modint a(1),b(1);",
      "        for(ll i=0;i<r;++i){",
      "            a *= (n-i);",
      "            b *= (i+1);",
      "        }",
      "        return a/b;",
      "    }",
      "    template<typename T>",
      "    modint& operator=(T t){t %= (T)M; if(t < 0) t += (T)M; val = t; return *this;}",
      "    modint inv() const {return pow(M-2);}",
      "    modint& operator+=(modint a){val += a.val; if(val >= M) val -= M; return *this;}",
      "    modint& operator-=(modint a){if(val < a.val) val += M-a.val; else val -= a.val; return *this;}",
      "    modint& operator*=(modint a){val = (u64)val*a.val%M; return *this;}",
      "    modint& operator/=(modint a){return (*this) *= a.inv();}",
      "    modint operator+(modint a) const {return modint(val) +=a;}",
      "    modint operator-(modint a) const {return modint(val) -=a;}",
      "    modint operator*(modint a) const {return modint(val) *=a;}",
      "    modint operator/(modint a) const {return modint(val) /=a;}",
      "    modint operator-(){return modint(M-val);}",
      "    bool operator==(const modint a) const {return val == a.val;}",
      "    bool operator!=(const modint a) const {return val != a.val;}",
      "    bool operator<(const modint a) const {return val < a.val;}",
      "    constexpr u64 &value() noexcept { return val; }",
      "    constexpr const u64 &value() const noexcept { return val; }",
      "    friend ostream& operator<<(ostream& os, const modint& dt){",
      "        os<<dt.val;",
      "        return os;",
      "    }",
      "};",
      "constexpr ll MOD=1e9+7;",
      "using mint = modint<MOD>;"
    ],
    "prefix": "modint",
    "description": "MODした値を保持する整数"
  },
  "main function": {
    "body": [
      "//$1",
      "#include <bits/stdc++.h>",
      "#if LOCAL",
      "#include \"dump.hpp\"",
      "#else",
      "#define dump(...)",
      "#endif",
      "using namespace std;",
      "using ll=long long;",
      "const ll LINF = 0x1fffffffffffffff;",
      "#define FOR(i,a,b) for(ll i=(a);i<(b);++i)",
      "#define REP(i,n) FOR(i,0,n)",
      "template<class T>bool chmax(T &a, const T &b) {if (a<b) { a=b; return 1; } return 0;}",
      "template<class T>bool chmin(T &a, const T &b) {if (b<a) { a=b; return 1; } return 0;}",
      "int main() {",
      "  ",
      "  return 0;",
      "}"
    ],
    "prefix": "m",
    "description": "main function"
  },
  "input_text": {
    "body": [
      "#if LOCAL&01",
      "  std::ifstream in(\"./test/sample-1.in\");",
      "  //std::ifstream in(\"./input.txt\");",
      "  std::cin.rdbuf(in.rdbuf());",
      "#else",
      "  cin.tie(0);",
      "  ios::sync_with_stdio(false);",
      "#endif"
    ],
    "prefix": "input",
    "description": "input text"
  },
  "cout for float": {
    "body": [
      "  cout<<fixed<<std::setprecision(10)"
    ],
    "prefix": "cout_float",
    "description": "float用のcout"
  },
  "mod primary": {
    "body": [
      "constexpr ll MOD=1e9+7;"
    ],
    "prefix": "mod",
    "description": "mod primary number"
  },
  "string split": {
    "body": [
      "std::vector<std::string> split(const std::string& input, char delimiter){",
      "  std::istringstream stream(input);",
      "  std::string field;",
      "  std::vector<std::string> result;",
      "  while (std::getline(stream, field, delimiter)) {",
      "    result.push_back(field);",
      "  }",
      "  return result;",
      "}"
    ],
    "prefix": "split",
    "description": "string split"
  },
  "least common multiple": {
    "body": [
      "ll lcm(ll num1,ll num2){",
      "  //return num1 / __gcd(num1,num2) * num2;",
      "  return num1 / std::gcd(num1,num2) * num2;",
      "}"
    ],
    "prefix": "lcm",
    "description": "least common multiple"
  },
  "combination": {
    "body": [
      "void recursive_comb(vector<ll>& indexes, ll s, ll rest, std::function<void(vector<ll>&)> f) {",
      "  if (rest == 0) {",
      "    f(indexes);",
      "  } else {",
      "    if (s < 0) return;",
      "    recursive_comb(indexes, s - 1, rest, f);",
      "    indexes.at(rest - 1) = s;",
      "    recursive_comb(indexes, s - 1, rest - 1, f);",
      "  }",
      "}",
      "// nCkの組み合わせに対して処理を実行する",
      "void foreach_comb(ll n, ll k, std::function<void(vector<ll>&)> f) {",
      "  vector<ll> indexes(k);",
      "  recursive_comb(indexes, n - 1, k, f);",
      "}",
      "//foreach_comb(N-1, 2, [&](vector<ll>& indexes) {",
      "//  dump(indexes[0],indexes[1]);",
      "//});"
    ],
    "prefix": "combination",
    "description": "nCkの組み合わせ列挙"
  },
  "matrix": {
    "body": [
      "template< typename T >",
      "using Matrix = vector< vector< T > >;",
      "template< typename T>",
      "Matrix<T> make_matrix(ll y, ll x, T v={}){",
      "\treturn Matrix<T>(y, vector<T>(x,v));",
      "}"
    ],
    "prefix": "matrix",
    "description": "matrix vector2重配列"
  },
  "deg2rad": {
    "body": [
      "double deg2rad(double deg){",
      "  return deg*M_PI/180.0;",
      "}",
      "double rad2deg(double rad){",
      "  return rad*180.0/M_PI;",
      "}"
    ],
    "prefix": "deg2rad",
    "description": "degree to radian, radian to degree"
  }
}
